plugins {
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle' version '[6.0.18,6.2)'
}

base {
	archivesName = "${mod_id}-neoforge-${minecraft_version}"
}

minecraft {
	mappings channel: 'official', version: minecraft_version

	copyIdeResources = true //Calls processResources when in dev

	// Automatically enable forge AccessTransformers if the file exists
	// This location is hardcoded in Forge and can not be changed.
	// https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
	if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
		accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	}

	runs {
		configureEach {
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
		}
		client {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			mods {
				modClientRun {
					source sourceSets.main
					source project(":common").sourceSets.main
				}
			}

			if (project.hasProperty('mc_uuid')) {
				// Your UUID, trimmed / without the dashes
				args("--uuid=${project.mc_uuid}")
			}

			if (project.hasProperty('mc_username')) {
				// Your Minecraft in-game username, not email
				args("--username=${project.mc_username}")
			}
		}

		server {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			args '--nogui'
			mods {
				modServerRun {
					source sourceSets.main
					source project(":common").sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')
			ideaModule "${rootProject.name}.${project.name}.main"
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			mods {
				modDataRun {
					source sourceSets.main
					source project(":common").sourceSets.main
				}
			}
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	minecraft "net.neoforged:forge:${minecraft_version}-${neoforge_version}"
	compileOnly project(":common")
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
	source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
	source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
	from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
	from project(":common").sourceSets.main.resources
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId base.archivesName.get()
			from components.java
		}
	}
	repositories {
		maven {
			url "file://" + System.getenv("local_maven")
		}
	}
}
